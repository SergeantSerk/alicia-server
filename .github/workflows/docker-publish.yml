name: Build and Push Multi-Architecture Docker Image

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
    tags: ['v*']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  # Build job using matrix strategy for parallelization
  build:
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            cache-scope: amd64
          - platform: linux/arm64
            runner: ubuntu-latest
            cache-scope: arm64
          - platform: linux/arm/v7
            runner: ubuntu-latest
            cache-scope: armv7
    
    outputs:
      image-digest-amd64: ${{ matrix.cache-scope == 'amd64' && steps.build.outputs.digest || '' }}
      image-digest-arm64: ${{ matrix.cache-scope == 'arm64' && steps.build.outputs.digest || '' }}
      image-digest-armv7: ${{ matrix.cache-scope == 'armv7' && steps.build.outputs.digest || '' }}
      tags: ${{ steps.meta.outputs.tags }}
      push: ${{ steps.push.outputs.push }}
      repo-name: ${{ steps.repo.outputs.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo
        run: echo "name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Determine push behavior
        id: push
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "push=false" >> $GITHUB_OUTPUT
          else
            echo "push=true" >> $GITHUB_OUTPUT
          fi

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ steps.push.outputs.push }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache-scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache-scope }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }},push-by-digest=${{ steps.push.outputs.push }},name-canonical=true,push=${{ steps.push.outputs.push }}

  # Create and push manifest
  manifest:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Get all the tags from the build job
          TAGS='${{ needs.build.outputs.tags }}'
          
          # Create manifest for each tag
          echo "$TAGS" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "Creating manifest for tag: $tag"
              
              # Create manifest list combining all platform digests
              docker buildx imagetools create \
                --tag "$tag" \
                "${{ env.REGISTRY }}/${{ needs.build.outputs.repo-name }}@${{ needs.build.outputs.image-digest-amd64 }}" \
                "${{ env.REGISTRY }}/${{ needs.build.outputs.repo-name }}@${{ needs.build.outputs.image-digest-arm64 }}" \
                "${{ env.REGISTRY }}/${{ needs.build.outputs.repo-name }}@${{ needs.build.outputs.image-digest-armv7 }}"
              
              echo "âœ… Manifest created and pushed for $tag"
            fi
          done

      - name: Inspect manifests
        run: |
          TAGS='${{ needs.build.outputs.tags }}'
          echo "$TAGS" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "ðŸ“‹ Manifest for $tag:"
              docker buildx imagetools inspect "$tag"
              echo "---"
            fi
          done
