name: Build and publish Docker image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]
  release:
    types: [published]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            cache-scope: amd64
          - platform: linux/arm64
            cache-scope: arm64
          - platform: linux/arm/v7
            cache-scope: armv7
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest-amd64: ${{ matrix.cache-scope == 'amd64' && steps.build-and-push.outputs.digest || '' }}
      image-digest-arm64: ${{ matrix.cache-scope == 'arm64' && steps.build-and-push.outputs.digest || '' }}
      image-digest-armv7: ${{ matrix.cache-scope == 'armv7' && steps.build-and-push.outputs.digest || '' }}
      tags: ${{ steps.meta.outputs.tags }}
      push: ${{ github.event_name != 'pull_request' }}
      repo-name: ${{ env.IMAGE_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache-scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache-scope }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=${{ github.event_name != 'pull_request' }},name-canonical=true,push=${{ github.event_name != 'pull_request' }}

  # Create and push manifest
  manifest:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Get all the tags from the build job
          TAGS='${{ needs.build.outputs.tags }}'
          
          # Create manifest for each tag
          echo "$TAGS" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "Creating manifest for tag: $tag"
              
              # Create manifest list combining all platform digests
              docker buildx imagetools create \
                --tag "$tag" \
                "${{ env.REGISTRY }}/${{ needs.build.outputs.repo-name }}@${{ needs.build.outputs.image-digest-amd64 }}" \
                "${{ env.REGISTRY }}/${{ needs.build.outputs.repo-name }}@${{ needs.build.outputs.image-digest-arm64 }}" \
                "${{ env.REGISTRY }}/${{ needs.build.outputs.repo-name }}@${{ needs.build.outputs.image-digest-armv7 }}"
              
              echo "âœ… Manifest created and pushed for $tag"
            fi
          done

      - name: Inspect manifests
        run: |
          TAGS='${{ needs.build.outputs.tags }}'
          echo "$TAGS" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "ðŸ“‹ Manifest for $tag:"
              docker buildx imagetools inspect "$tag"
              echo "---"
            fi
          done
